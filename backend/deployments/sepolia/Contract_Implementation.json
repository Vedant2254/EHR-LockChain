{
  "address": "0x8872E473b7b8500C0A65cf6551f383a8AB017c4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MinimalForwarder",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Contract__DoctorPublicKeyMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Contract__NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Contract__NotDoctor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Contract__NotPatient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Contract__PendingDoctorApproval",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "approveDr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_general_hash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_key_hash",
          "type": "string"
        }
      ],
      "name": "changeEditorAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "disapproveDr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminPubKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDrs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getDrHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDrOfPt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getDrPubKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPatViewers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingDrs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getPtGeneralHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getPtRecordHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPtsOfDr",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "grantViewerAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isDoctor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isDrPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isDrRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isPatient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "registerDr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_public_key",
          "type": "string"
        }
      ],
      "name": "registerDrConfirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_key_data_hash",
          "type": "string"
        }
      ],
      "name": "registerPt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_general_hash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_key_hash",
          "type": "string"
        }
      ],
      "name": "removeEditorAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "revokeViewerAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_public_key",
          "type": "string"
        }
      ],
      "name": "setAdminPubKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "setDrHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "setPtGeneralHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_hash",
          "type": "string"
        }
      ],
      "name": "setPtRecordHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfff2d2e42ac323a8141125566a8385f9a29f266fed6981fdafacb1c37c0fe59b",
  "receipt": {
    "to": null,
    "from": "0x1EbbD6c85cfF4335Ae0C182b2781A777676Ee97A",
    "contractAddress": "0x8872E473b7b8500C0A65cf6551f383a8AB017c4c",
    "transactionIndex": 8,
    "gasUsed": "3766779",
    "logsBloom": "0x
    "blockHash": "0x45224fb49cdcef3c0cd01be0f3509ca3d66c103d8568061477270bebfaca705d",
    "transactionHash": "0xfff2d2e42ac323a8141125566a8385f9a29f266fed6981fdafacb1c37c0fe59b",
    "logs": [],
    "blockNumber": 3498545,
    "cumulativeGasUsed": "8701587",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5473C27565c06f65746049b621CF36d17c104cfb"
  ],
  "numDeployments": 1,
  "solcInputHash": "40ea02a3b9c0d9dc7c8cf865f9cac13c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MinimalForwarder\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Contract__DoctorPublicKeyMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Contract__NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Contract__NotDoctor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Contract__NotPatient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Contract__PendingDoctorApproval\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"approveDr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_general_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key_hash\",\"type\":\"string\"}],\"name\":\"changeEditorAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disapproveDr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminPubKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDrHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrOfPt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDrPubKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPatViewers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingDrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPtGeneralHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPtRecordHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPtsOfDr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantViewerAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDoctor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDrPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDrRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPatient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"registerDr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_public_key\",\"type\":\"string\"}],\"name\":\"registerDrConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key_data_hash\",\"type\":\"string\"}],\"name\":\"registerPt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_general_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key_hash\",\"type\":\"string\"}],\"name\":\"removeEditorAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeViewerAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_public_key\",\"type\":\"string\"}],\"name\":\"setAdminPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"setDrHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"setPtGeneralHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"setPtRecordHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Contract.sol\":\"Contract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x10d677119c17bf67ce9ba5edcfbf45ae9f086296fd37f1ccbf533344b71e6951\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (metatx/MinimalForwarder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n *\\n * MinimalForwarder is mainly meant for testing, as it is missing features to be a good production-ready forwarder. This\\n * contract does not intend to have all the properties that are needed for a sound forwarding system. A fully\\n * functioning forwarding system with good properties requires more complexity. We suggest you look at other projects\\n * such as the GSN which do have the goal of building a system like that.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.limo/blog/ethereum-gas-dangers/\\n        if (gasleft() <= req.gas / 63) {\\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\\n            // neither revert or assert consume all gas since Solidity 0.8.0\\n            // https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                invalid()\\n            }\\n        }\\n\\n        return (success, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xc38f078acfe8e3e6b62db677673cb0c9414d3666aea286ac9fe46fba60a36c88\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AddToBoolMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary AddToBoolMapping {\\n    // mapping address => bool\\n    struct Map {\\n        address[] keys;\\n        mapping(address => bool) values;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (bool) {\\n        return map.values[key];\\n    }\\n\\n    function getKeys(Map storage map) internal view returns (address[] memory) {\\n        return map.keys;\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(Map storage map, address key) internal {\\n        if (map.values[key]) return;\\n\\n        // add address => true mapping to values\\n        map.values[key] = true;\\n\\n        // add index of address to indexOf mapping\\n        map.indexOf[key] = map.keys.length;\\n\\n        // add address to keys\\n        map.keys.push(key);\\n    }\\n\\n    function unset(Map storage map, address key) internal {\\n        if (!map.values[key]) return;\\n\\n        // remove from values\\n        delete map.values[key];\\n\\n        // important backups\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        // update indexOf last element\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        // remove from keys\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xf4944f25058b889d9bebf1d53283eab488e3200f3e2a48e47f52849b113644cc\",\"license\":\"MIT\"},\"contracts/AddToStrMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary AddToStrMapping {\\n    // mapping address => string\\n    struct Map {\\n        address[] keys;\\n        mapping(address => string) values;\\n        mapping(address => uint256) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) internal view returns (string memory) {\\n        return map.values[key];\\n    }\\n\\n    function getKeys(Map storage map) internal view returns (address[] memory) {\\n        return map.keys;\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint256 index) internal view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) internal view returns (uint256) {\\n        return map.keys.length;\\n    }\\n\\n    function set(Map storage map, address key, string memory val) internal {\\n        if (!map.inserted[key]) {\\n            // add index of address to indexOf mapping\\n            map.indexOf[key] = map.keys.length;\\n\\n            // make value of address in inserted to true\\n            map.inserted[key] = true;\\n\\n            // add address to keys\\n            map.keys.push(key);\\n        }\\n\\n        // add address => true mapping to values\\n        map.values[key] = val;\\n    }\\n\\n    function remove(Map storage map, address key) internal {\\n        if (!map.inserted[key]) return;\\n\\n        // remove from values\\n        delete map.values[key];\\n        delete map.inserted[key];\\n\\n        // important backups\\n        uint256 index = map.indexOf[key];\\n        uint256 lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        // update indexOf last element\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        // remove from keys\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x44a19745fb3130275849bcaaf82f085c8a50d1d105b431e5c6df0625e9289f14\",\"license\":\"MIT\"},\"contracts/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary AddressArrayUtils {\\n    function indexOf(address[] memory arr, address key) internal pure returns (int256) {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] == key) return int256(i);\\n        }\\n        return -1;\\n    }\\n\\n    function contains(address[] memory arr, address key) internal pure returns (bool) {\\n        return indexOf(arr, key) != -1;\\n    }\\n\\n    function remove(address[] storage arr, address key) internal returns (bool) {\\n        int256 i = indexOf(arr, key);\\n\\n        if (i == -1) return false;\\n\\n        address[] memory temp = arr;\\n        arr[uint256(i)] = temp[temp.length - 1];\\n        arr.pop();\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x29555ad812fd5509ead59914b9bc59285a5f7b96bedcfed493bca55994271d67\",\"license\":\"MIT\"},\"contracts/Contract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./AddressArrayUtils.sol\\\";\\nimport \\\"./AddToBoolMapping.sol\\\";\\n\\nerror Contract__NotAdmin();\\nerror Contract__NotDoctor();\\nerror Contract__NotPatient();\\nerror Contract__PendingDoctorApproval();\\nerror Contract__DoctorPublicKeyMissing();\\n\\ncontract Contract is ERC2771ContextUpgradeable {\\n    // using methods of Roles for Role struct in Roles\\n    using Roles for Roles.Role;\\n    using AddToBoolMapping for AddToBoolMapping.Map;\\n    using AddressArrayUtils for address[];\\n\\n    struct MedicalRecord {\\n        address editor;\\n        address[] viewers;\\n        string key_data_hash;\\n    }\\n\\n    struct Admin {\\n        address user;\\n        string public_key;\\n        AddToBoolMapping.Map pending_doctors;\\n    }\\n\\n    struct Patients {\\n        Roles.Role users;\\n        mapping(address => MedicalRecord) records;\\n    }\\n\\n    struct Doctors {\\n        Roles.Role users;\\n        mapping(address => string) public_keys;\\n        mapping(address => AddToBoolMapping.Map) docToPatAccess;\\n    }\\n\\n    // defining roles - contains hashes\\n    Admin private admin;\\n    Doctors private doctors;\\n    Patients private patients;\\n\\n    bool initialized;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        MinimalForwarder forwarder // Initialize trusted forwarder\\n    ) ERC2771ContextUpgradeable(address(forwarder)) {}\\n\\n    function initialize() public {\\n        require(!initialized, \\\"Contract already initialized!\\\");\\n        admin.user = _msgSender();\\n        initialized = true;\\n    }\\n\\n    // Admin methods\\n    function isAdmin(address _address) public view returns (bool) {\\n        if (admin.user == _address) return true;\\n        return false;\\n    }\\n\\n    function getAdmin() public view returns (address) {\\n        return admin.user;\\n    }\\n\\n    function setAdminPubKey(string memory _public_key) public onlyAdmin {\\n        admin.public_key = _public_key;\\n    }\\n\\n    function getAdminPubKey() public view returns (string memory) {\\n        return admin.public_key;\\n    }\\n\\n    // Doctor methods\\n    function isDrRegistered(address _address) public view returns (bool) {\\n        return doctors.users.has(_address);\\n    }\\n\\n    function isDrPending(address _address) public view returns (bool) {\\n        return admin.pending_doctors.get(_address);\\n    }\\n\\n    function isDoctor(address _address) public view returns (bool) {\\n        if (!doctors.users.has(_address)) return false;\\n        if (admin.pending_doctors.get(_address)) return false;\\n        if (bytes(doctors.public_keys[_address]).length == 0) return false;\\n        return true;\\n    }\\n\\n    function registerDr(string memory _hash) public {\\n        if (isPatient(_msgSender())) revert(\\\"Contract: Address already registered as patient\\\");\\n        if (bytes(_hash).length == 0) revert(\\\"Contract: Empty hash is not allowed\\\");\\n        doctors.users.add(_msgSender(), _hash);\\n        admin.pending_doctors.set(_msgSender());\\n    }\\n\\n    function approveDr(address _address) public onlyAdmin {\\n        if (isDoctor(_address)) return;\\n        if (!doctors.users.has(_address)) return;\\n        admin.pending_doctors.unset(_address);\\n    }\\n\\n    function disapproveDr(address _address) public onlyAdmin {\\n        if (!isDrPending(_address)) revert(\\\"Contract: Doctor not registered\\\");\\n        doctors.users.remove(_address);\\n        admin.pending_doctors.unset(_address);\\n    }\\n\\n    function registerDrConfirm(string memory _public_key) public {\\n        if (bytes(_public_key).length == 0) revert(\\\"Contract: Empty public key is not allowed!\\\");\\n        if (!doctors.users.has(_msgSender())) revert Contract__NotDoctor();\\n        if (admin.pending_doctors.get(_msgSender())) revert Contract__PendingDoctorApproval();\\n        doctors.public_keys[_msgSender()] = _public_key;\\n    }\\n\\n    function setDrHash(string memory _hash) public onlyDoctor {\\n        if (bytes(_hash).length == 0) revert(\\\"Contract: Empty hash is not allowed!\\\");\\n        doctors.users.setHash(_msgSender(), _hash);\\n    }\\n\\n    function getDrHash(address _address) public view returns (string memory) {\\n        if (!isDrRegistered(_address)) revert Contract__NotDoctor();\\n        return doctors.users.getHash(_address);\\n    }\\n\\n    function getDrPubKey(address _address) public view returns (string memory) {\\n        return doctors.public_keys[_address];\\n    }\\n\\n    function getAllDrs() public view returns (address[] memory) {\\n        return doctors.users.getMembers();\\n    }\\n\\n    function getPendingDrs() public view returns (address[] memory) {\\n        return admin.pending_doctors.keys;\\n    }\\n\\n    function getPtsOfDr() public view onlyDoctor returns (address[] memory) {\\n        return doctors.docToPatAccess[_msgSender()].keys;\\n    }\\n\\n    // Patient methods\\n    function isPatient(address _address) public view returns (bool) {\\n        return patients.users.has(_address);\\n    }\\n\\n    function registerPt(string memory _hash, string memory _key_data_hash) public {\\n        if (isDrRegistered(_msgSender()) || isDoctor(_msgSender()))\\n            revert(\\\"Contract: Address already registered as doctor\\\");\\n        if (bytes(_hash).length == 0) revert(\\\"Contract: Empty hash is not allowed\\\");\\n        patients.users.add(_msgSender(), _hash);\\n        patients.records[_msgSender()].editor = _msgSender();\\n        patients.records[_msgSender()].key_data_hash = _key_data_hash;\\n    }\\n\\n    function setPtGeneralHash(string memory _hash) public onlyPatient {\\n        patients.users.setHash(_msgSender(), _hash);\\n    }\\n\\n    function getPtGeneralHash(address _address) public view returns (string memory) {\\n        if (!isPatient(_address)) revert Contract__NotPatient();\\n\\n        if (\\n            _msgSender() == _address ||\\n            patients.records[_address].editor == _msgSender() ||\\n            patients.records[_address].viewers.indexOf(_msgSender()) != -1\\n        ) return patients.users.getHash(_address);\\n\\n        revert(\\\"Not Allowed\\\");\\n    }\\n\\n    function setPtRecordHash(address _address, string memory _hash) public {\\n        if (!isPatient(_address)) revert Contract__NotPatient();\\n        if (!(patients.records[_address].editor == _msgSender())) revert(\\\"Not Allowed\\\");\\n        patients.records[_address].key_data_hash = _hash;\\n    }\\n\\n    function getPtRecordHash(address _address) public view returns (string memory) {\\n        if (!isPatient(_address)) revert Contract__NotPatient();\\n\\n        if (\\n            _msgSender() == _address ||\\n            patients.records[_address].editor == _msgSender() ||\\n            patients.records[_address].viewers.indexOf(_msgSender()) != -1\\n        ) return patients.records[_address].key_data_hash;\\n\\n        revert(\\\"Not Allowed\\\");\\n    }\\n\\n    function getAllPts() public view returns (address[] memory) {\\n        return patients.users.getMembers();\\n    }\\n\\n    function changeEditorAccess(\\n        address _address,\\n        string memory _general_hash,\\n        string memory _key_hash\\n    ) public onlyPatient {\\n        // pending update - when user changes access, symmetric key S must be changed\\n        if (!isDoctor(_address)) revert Contract__NotDoctor();\\n\\n        // remove old editor access\\n        removeEditorAccess(_general_hash, _key_hash);\\n\\n        // add new editor access\\n        patients.records[_msgSender()].editor = _address;\\n        doctors.docToPatAccess[_address].set(_msgSender());\\n    }\\n\\n    function removeEditorAccess(\\n        string memory _general_hash,\\n        string memory _key_hash\\n    ) public onlyPatient {\\n        address old_editor = patients.records[_msgSender()].editor;\\n        patients.records[_msgSender()].editor = _msgSender();\\n        doctors.docToPatAccess[old_editor].unset(_msgSender());\\n\\n        patients.users.setHash(_msgSender(), _general_hash);\\n        patients.records[_msgSender()].key_data_hash = _key_hash;\\n    }\\n\\n    function getDrOfPt() public view onlyPatient returns (address) {\\n        return patients.records[_msgSender()].editor;\\n    }\\n\\n    function grantViewerAccess(address _address) public onlyPatient {\\n        if (!isDoctor(_address)) revert Contract__NotDoctor();\\n\\n        if (!patients.records[_msgSender()].viewers.contains(_address)) {\\n            patients.records[_msgSender()].viewers.push(_address);\\n        }\\n    }\\n\\n    function revokeViewerAccess(address _address) public onlyPatient {\\n        // pending update - when user revokes access, symmetric key S must be changed\\n        if (!isDoctor(_address)) revert Contract__NotDoctor();\\n\\n        patients.records[_msgSender()].viewers.remove(_address);\\n    }\\n\\n    function getPatViewers() public view onlyPatient returns (address[] memory) {\\n        return patients.records[_msgSender()].viewers;\\n    }\\n\\n    // modifiers\\n    modifier onlyAdmin() {\\n        if (!isAdmin(_msgSender())) revert Contract__NotAdmin();\\n        _;\\n    }\\n\\n    modifier onlyDoctor() {\\n        if (!doctors.users.has(_msgSender())) revert Contract__NotDoctor();\\n        if (admin.pending_doctors.get(_msgSender())) revert Contract__PendingDoctorApproval();\\n        if (bytes(doctors.public_keys[_msgSender()]).length == 0)\\n            revert Contract__DoctorPublicKeyMissing();\\n        _;\\n    }\\n\\n    modifier onlyPatient() {\\n        if (!isPatient(_msgSender())) revert Contract__NotPatient();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x900167dc0830624a68922083025f169ae2cf8cc30a622bcf2cf35279165e75a7\",\"license\":\"MIT\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./AddToStrMapping.sol\\\";\\n\\nlibrary Roles {\\n    using AddToStrMapping for AddToStrMapping.Map;\\n\\n    // This is to keep track of roles\\n    // Reduces searching cost\\n    struct Role {\\n        AddToStrMapping.Map bearer;\\n    }\\n\\n    function add(Role storage role, address account, string memory hash) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer.set(account, hash);\\n    }\\n\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer.remove(account);\\n    }\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return bytes(role.bearer.get(account)).length != 0;\\n    }\\n\\n    function setHash(Role storage role, address account, string memory _hash) internal {\\n        role.bearer.set(account, _hash);\\n    }\\n\\n    function getHash(Role storage role, address account) internal view returns (string memory) {\\n        return role.bearer.get(account);\\n    }\\n\\n    function getMembers(Role storage role) internal view returns (address[] memory) {\\n        return role.bearer.keys;\\n    }\\n}\\n\",\"keccak256\":\"0x35319b78de3f838d4fdae2c499ccf5b4ed9407222e38d041a303fb7b42bf47aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620044a5380380620044a58339818101604052810190620000379190620000f2565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505062000124565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a68262000079565b9050919050565b6000620000ba8262000099565b9050919050565b620000cc81620000ad565b8114620000d857600080fd5b50565b600081519050620000ec81620000c1565b92915050565b6000602082840312156200010b576200010a62000074565b5b60006200011b84828501620000db565b91505092915050565b608051614365620001406000396000610f5701526143656000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638f7f43a91161010f578063c70597ad116100a2578063d3cd4df411610071578063d3cd4df4146105b5578063dc823aaf146105d1578063e2877b4e14610601578063f7a03a1e1461061f576101f0565b8063c70597ad1461052f578063cce9d43e1461054b578063ccfaed161461057b578063d0d9a5e314610597576101f0565b8063a03de49e116100de578063a03de49e146104bd578063a53f514d146104d9578063afb97e3d146104f7578063b1e758a414610513576101f0565b80638f7f43a9146104235780638f9c79ed14610441578063996440c61461047157806399eedd2a146104a1576101f0565b80634df0a2d4116101875780636e9960c3116101565780636e9960c3146103c3578063745ada64146103e15780638129fc1c146103fd57806388c432e114610407576101f0565b80634df0a2d414610317578063572b6c05146103475780635b0a7aad146103775780636d4bce2014610393576101f0565b806324d7806c116101c357806324d7806c1461026b578063290c61b01461029b57806332991838146102cb5780633d8198b4146102e7576101f0565b80630de99991146101f5578063116461e9146102115780631da3e2dc1461022f57806321639f041461024d575b600080fd5b61020f600480360381019061020a9190613494565b61063b565b005b6102196106c5565b6040516102269190613551565b60405180910390f35b61023761075a565b6040516102449190613631565b60405180910390f35b61025561076e565b6040516102629190613662565b60405180910390f35b61028560048036038101906102809190613494565b610828565b6040516102929190613698565b60405180910390f35b6102b560048036038101906102b09190613494565b610895565b6040516102c29190613698565b60405180910390f35b6102e560048036038101906102e091906137e8565b6108b5565b005b61030160048036038101906102fc9190613494565b61098a565b60405161030e9190613551565b60405180910390f35b610331600480360381019061032c9190613494565b610cca565b60405161033e9190613551565b60405180910390f35b610361600480360381019061035c9190613494565b610f53565b60405161036e9190613698565b60405180910390f35b610391600480360381019061038c9190613831565b610fab565b005b6103ad60048036038101906103a89190613494565b6111ce565b6040516103ba9190613698565b60405180910390f35b6103cb6111ee565b6040516103d89190613662565b60405180910390f35b6103fb60048036038101906103f69190613494565b61121b565b005b6104056112da565b005b610421600480360381019061041c91906137e8565b611392565b005b61042b6113fb565b6040516104389190613631565b60405180910390f35b61045b60048036038101906104569190613494565b611519565b6040516104689190613698565b60405180910390f35b61048b60048036038101906104869190613494565b611539565b6040516104989190613698565b60405180910390f35b6104bb60048036038101906104b691906137e8565b6115ed565b005b6104d760048036038101906104d29190613831565b61178c565b005b6104e1611947565b6040516104ee9190613631565b60405180910390f35b610511600480360381019061050c91906137e8565b61195b565b005b61052d60048036038101906105289190613494565b6119b7565b005b610549600480360381019061054491906138a9565b611bd4565b005b61056560048036038101906105609190613494565b611d44565b6040516105729190613551565b60405180910390f35b610595600480360381019061059091906137e8565b611da3565b005b61059f611eea565b6040516105ac9190613631565b60405180910390f35b6105cf60048036038101906105ca9190613905565b6120fa565b005b6105eb60048036038101906105e69190613494565b612274565b6040516105f89190613551565b60405180910390f35b610609612348565b6040516106169190613631565b60405180910390f35b61063960048036038101906106349190613494565b6123dc565b005b61064b6106466124c3565b610828565b610681576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61068a81611539565b6106c2576106a581606a6000016124f590919063ffffffff16565b156106c2576106c181606560020161258890919063ffffffff16565b5b50565b6060606560010180546106d7906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610703906139bf565b80156107505780601f1061072557610100808354040283529160200191610750565b820191906000526020600020905b81548152906001019060200180831161073357829003601f168201915b5050505050905090565b6060610769606a60000161280b565b905090565b600061078061077b6124c3565b611519565b6107b6576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060040160006107c56124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008173ffffffffffffffffffffffffffffffffffffffff16606560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361088b5760019050610890565b600090505b919050565b60006108ae82606a6000016124f590919063ffffffff16565b9050919050565b6108c56108c06124c3565b611519565b15610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90613a62565b60405180910390fd5b6000815103610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090613af4565b60405180910390fd5b6109696109546124c3565b82606a6000016128a09092919063ffffffff16565b6109876109746124c3565b606560020161290790919063ffffffff16565b50565b606061099582611519565b6109cb576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166109ea6124c3565b73ffffffffffffffffffffffffffffffffffffffff161480610aa35750610a0f6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610bb057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610bad610ad56124c3565b607060040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610b9a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b50575b5050505050612a6b90919063ffffffff16565b14155b15610c8a57607060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054610c05906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c31906139bf565b8015610c7e5780601f10610c5357610100808354040283529160200191610c7e565b820191906000526020600020905b815481529060010190602001808311610c6157829003601f168201915b50505050509050610cc5565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbc90613b60565b60405180910390fd5b919050565b6060610cd582611519565b610d0b576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16610d2a6124c3565b73ffffffffffffffffffffffffffffffffffffffff161480610de35750610d4f6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610ef057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610eed610e156124c3565b607060040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610eda57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e90575b5050505050612a6b90919063ffffffff16565b14155b15610f1357610f0c826070600001612b1090919063ffffffff16565b9050610f4e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4590613b60565b60405180910390fd5b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610fbb610fb66124c3565b611519565b610ff1576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607060040160006110026124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061106a6124c3565b607060040160006110796124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061114f6110ff6124c3565b606a60050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258890919063ffffffff16565b61116f61115a6124c3565b846070600001612b309092919063ffffffff16565b816070600401600061117f6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816111c89190613d36565b50505050565b60006111e7826065600201612b4d90919063ffffffff16565b9050919050565b6000606560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61122b6112266124c3565b610828565b611261576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126a816111ce565b6112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a090613e54565b60405180910390fd5b6112c081606a600001612ba690919063ffffffff16565b6112d781606560020161258890919063ffffffff16565b50565b607560009054906101000a900460ff161561132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613ec0565b60405180910390fd5b6113326124c3565b606560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001607560006101000a81548160ff021916908315150217905550565b6113a261139d6124c3565b611519565b6113d8576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f86113e36124c3565b826070600001612b309092919063ffffffff16565b50565b606061140d6114086124c3565b611519565b611443576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060040160006114526124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561150f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116114c5575b5050505050905090565b60006115328260706000016124f590919063ffffffff16565b9050919050565b600061155282606a6000016124f590919063ffffffff16565b61155f57600090506115e8565b611576826065600201612b4d90919063ffffffff16565b1561158457600090506115e8565b6000606a60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546115d3906139bf565b9050036115e357600090506115e8565b600190505b919050565b61160b6115f86124c3565b606a6000016124f590919063ffffffff16565b611641576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61165f61164c6124c3565b6065600201612b4d90919063ffffffff16565b15611696576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60040160006116a76124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546116ec906139bf565b905003611725576040517fa30132d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000815103611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176090613f52565b60405180910390fd5b6117896117746124c3565b82606a600001612b309092919063ffffffff16565b50565b61179c6117976124c3565b610895565b806117b357506117b26117ad6124c3565b611539565b5b156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90613fe4565b60405180910390fd5b6000825103611837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182e90613af4565b60405180910390fd5b6118576118426124c3565b8360706000016128a09092919063ffffffff16565b61185f6124c3565b6070600401600061186e6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607060040160006118f96124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816119429190613d36565b505050565b6060611956607060000161280b565b905090565b61196b6119666124c3565b610828565b6119a1576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560010190816119b39190613d36565b5050565b6119c76119c26124c3565b611519565b6119fd576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a0681611539565b611a3c576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b1f8160706004016000611a4f6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015611b0c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ac2575b5050505050612c0990919063ffffffff16565b611bd15760706004016000611b326124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b611bdd82611519565b611c13576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c1b6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ced576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce490613b60565b60405180910390fd5b80607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019081611d3f9190613d36565b505050565b6060611d4f82610895565b611d85576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d9c82606a600001612b1090919063ffffffff16565b9050919050565b6000815103611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde90614076565b60405180910390fd5b611e05611df26124c3565b606a6000016124f590919063ffffffff16565b611e3b576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e59611e466124c3565b6065600201612b4d90919063ffffffff16565b15611e90576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606a6004016000611ea06124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081611ee69190613d36565b5050565b6060611f0a611ef76124c3565b606a6000016124f590919063ffffffff16565b611f40576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f5e611f4b6124c3565b6065600201612b4d90919063ffffffff16565b15611f95576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a6004016000611fa66124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054611feb906139bf565b905003612024576040517fa30132d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60050160006120336124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156120f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116120a6575b5050505050905090565b61210a6121056124c3565b611519565b612140576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61214983611539565b61217f576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121898282610fab565b82607060040160006121996124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061226f61221f6124c3565b606a60050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061290790919063ffffffff16565b505050565b6060606a60040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546122c3906139bf565b80601f01602080910402602001604051908101604052809291908181526020018280546122ef906139bf565b801561233c5780601f106123115761010080835404028352916020019161233c565b820191906000526020600020905b81548152906001019060200180831161231f57829003601f168201915b50505050509050919050565b606060656002016000018054806020026020016040519081016040528092919081815260200182805480156123d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612388575b5050505050905090565b6123ec6123e76124c3565b611519565b612422576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61242b81611539565b612461576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124bf81607060040160006124746124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101612c4090919063ffffffff16565b5050565b60006124ce33610f53565b156124e257601436033560601c90506124f1565b6124ea612e65565b90506124f2565b5b90565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255c90614108565b60405180910390fd5b600061257d8385600001612e6d90919063ffffffff16565b511415905092915050565b8160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612807578160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600184600001805490506126899190614157565b905060008460000182815481106126a3576126a261418b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828560020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055808560000184815481106127725761277161418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846000018054806127ce576127cd6141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050505b5050565b60608160000160000180548060200260200160405190810160405280929190818152602001828054801561289457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161284a575b50505050509050919050565b6128aa83836124f5565b156128ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e190614235565b60405180910390fd5b612902828285600001612f419092919063ffffffff16565b505050565b8160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612a675760018260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600001805490508260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600080600090505b8351811015612ae5578273ffffffffffffffffffffffffffffffffffffffff16848281518110612aa657612aa561418b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612ad25780915050612b0a565b8080612add90614255565b915050612a73565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6060612b288284600001612e6d90919063ffffffff16565b905092915050565b612b48828285600001612f419092919063ffffffff16565b505050565b60008260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612bb082826124f5565b612bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be69061430f565b60405180910390fd5b612c0581836000016130f590919063ffffffff16565b5050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612c368484612a6b565b1415905092915050565b600080612cd284805480602002602001604051908101604052809291908181526020018280548015612cc757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612c7d575b505050505084612a6b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612d05576000915050612e5f565b600084805480602002602001604051908101604052809291908181526020018280548015612d8857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d3e575b505050505090508060018251612d9e9190614157565b81518110612daf57612dae61418b565b5b6020026020010151858381548110612dca57612dc961418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084805480612e2357612e226141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556001925050505b92915050565b600033905090565b60608260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054612ebb906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054612ee7906139bf565b8015612f345780601f10612f0957610100808354040283529160200191612f34565b820191906000526020600020905b815481529060010190602001808311612f1757829003601f168201915b5050505050905092915050565b8260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166130a15782600001805490508360020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018360030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816130ef9190613d36565b50505050565b8160030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156133c1578160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061319691906133c5565b8160030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600184600001805490506132439190614157565b9050600084600001828154811061325d5761325c61418b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828560020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558085600001848154811061332c5761332b61418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600001805480613388576133876141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050505b5050565b5080546133d1906139bf565b6000825580601f106133e35750613402565b601f0160209004906000526020600020908101906134019190613405565b5b50565b5b8082111561341e576000816000905550600101613406565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061346182613436565b9050919050565b61347181613456565b811461347c57600080fd5b50565b60008135905061348e81613468565b92915050565b6000602082840312156134aa576134a961342c565b5b60006134b88482850161347f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134fb5780820151818401526020810190506134e0565b60008484015250505050565b6000601f19601f8301169050919050565b6000613523826134c1565b61352d81856134cc565b935061353d8185602086016134dd565b61354681613507565b840191505092915050565b6000602082019050818103600083015261356b8184613518565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135a881613456565b82525050565b60006135ba838361359f565b60208301905092915050565b6000602082019050919050565b60006135de82613573565b6135e8818561357e565b93506135f38361358f565b8060005b8381101561362457815161360b88826135ae565b9750613616836135c6565b9250506001810190506135f7565b5085935050505092915050565b6000602082019050818103600083015261364b81846135d3565b905092915050565b61365c81613456565b82525050565b60006020820190506136776000830184613653565b92915050565b60008115159050919050565b6136928161367d565b82525050565b60006020820190506136ad6000830184613689565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136f582613507565b810181811067ffffffffffffffff82111715613714576137136136bd565b5b80604052505050565b6000613727613422565b905061373382826136ec565b919050565b600067ffffffffffffffff821115613753576137526136bd565b5b61375c82613507565b9050602081019050919050565b82818337600083830152505050565b600061378b61378684613738565b61371d565b9050828152602081018484840111156137a7576137a66136b8565b5b6137b2848285613769565b509392505050565b600082601f8301126137cf576137ce6136b3565b5b81356137df848260208601613778565b91505092915050565b6000602082840312156137fe576137fd61342c565b5b600082013567ffffffffffffffff81111561381c5761381b613431565b5b613828848285016137ba565b91505092915050565b600080604083850312156138485761384761342c565b5b600083013567ffffffffffffffff81111561386657613865613431565b5b613872858286016137ba565b925050602083013567ffffffffffffffff81111561389357613892613431565b5b61389f858286016137ba565b9150509250929050565b600080604083850312156138c0576138bf61342c565b5b60006138ce8582860161347f565b925050602083013567ffffffffffffffff8111156138ef576138ee613431565b5b6138fb858286016137ba565b9150509250929050565b60008060006060848603121561391e5761391d61342c565b5b600061392c8682870161347f565b935050602084013567ffffffffffffffff81111561394d5761394c613431565b5b613959868287016137ba565b925050604084013567ffffffffffffffff81111561397a57613979613431565b5b613986868287016137ba565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139d757607f821691505b6020821081036139ea576139e9613990565b5b50919050565b7f436f6e74726163743a204164647265737320616c72656164792072656769737460008201527f657265642061732070617469656e740000000000000000000000000000000000602082015250565b6000613a4c602f836134cc565b9150613a57826139f0565b604082019050919050565b60006020820190508181036000830152613a7b81613a3f565b9050919050565b7f436f6e74726163743a20456d7074792068617368206973206e6f7420616c6c6f60008201527f7765640000000000000000000000000000000000000000000000000000000000602082015250565b6000613ade6023836134cc565b9150613ae982613a82565b604082019050919050565b60006020820190508181036000830152613b0d81613ad1565b9050919050565b7f4e6f7420416c6c6f776564000000000000000000000000000000000000000000600082015250565b6000613b4a600b836134cc565b9150613b5582613b14565b602082019050919050565b60006020820190508181036000830152613b7981613b3d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613be27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ba5565b613bec8683613ba5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000613c33613c2e613c2984613c04565b613c0e565b613c04565b9050919050565b6000819050919050565b613c4d83613c18565b613c61613c5982613c3a565b848454613bb2565b825550505050565b600090565b613c76613c69565b613c81818484613c44565b505050565b5b81811015613ca557613c9a600082613c6e565b600181019050613c87565b5050565b601f821115613cea57613cbb81613b80565b613cc484613b95565b81016020851015613cd3578190505b613ce7613cdf85613b95565b830182613c86565b50505b505050565b600082821c905092915050565b6000613d0d60001984600802613cef565b1980831691505092915050565b6000613d268383613cfc565b9150826002028217905092915050565b613d3f826134c1565b67ffffffffffffffff811115613d5857613d576136bd565b5b613d6282546139bf565b613d6d828285613ca9565b600060209050601f831160018114613da05760008415613d8e578287015190505b613d988582613d1a565b865550613e00565b601f198416613dae86613b80565b60005b82811015613dd657848901518255600182019150602085019450602081019050613db1565b86831015613df35784890151613def601f891682613cfc565b8355505b6001600288020188555050505b505050505050565b7f436f6e74726163743a20446f63746f72206e6f74207265676973746572656400600082015250565b6000613e3e601f836134cc565b9150613e4982613e08565b602082019050919050565b60006020820190508181036000830152613e6d81613e31565b9050919050565b7f436f6e747261637420616c726561647920696e697469616c697a656421000000600082015250565b6000613eaa601d836134cc565b9150613eb582613e74565b602082019050919050565b60006020820190508181036000830152613ed981613e9d565b9050919050565b7f436f6e74726163743a20456d7074792068617368206973206e6f7420616c6c6f60008201527f7765642100000000000000000000000000000000000000000000000000000000602082015250565b6000613f3c6024836134cc565b9150613f4782613ee0565b604082019050919050565b60006020820190508181036000830152613f6b81613f2f565b9050919050565b7f436f6e74726163743a204164647265737320616c72656164792072656769737460008201527f6572656420617320646f63746f72000000000000000000000000000000000000602082015250565b6000613fce602e836134cc565b9150613fd982613f72565b604082019050919050565b60006020820190508181036000830152613ffd81613fc1565b9050919050565b7f436f6e74726163743a20456d707479207075626c6963206b6579206973206e6f60008201527f7420616c6c6f7765642100000000000000000000000000000000000000000000602082015250565b6000614060602a836134cc565b915061406b82614004565b604082019050919050565b6000602082019050818103600083015261408f81614053565b9050919050565b7f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006140f26022836134cc565b91506140fd82614096565b604082019050919050565b60006020820190508181036000830152614121816140e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061416282613c04565b915061416d83613c04565b925082820390508181111561418557614184614128565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500600082015250565b600061421f601f836134cc565b915061422a826141e9565b602082019050919050565b6000602082019050818103600083015261424e81614212565b9050919050565b600061426082613c04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361429257614291614128565b5b600182019050919050565b7f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006142f96021836134cc565b91506143048261429d565b604082019050919050565b60006020820190508181036000830152614328816142ec565b905091905056fea2646970667358221220dd8f0b37258b20166796d6d889fc491bbc6dcc696858ffa5fe47968b25f9a55164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80638f7f43a91161010f578063c70597ad116100a2578063d3cd4df411610071578063d3cd4df4146105b5578063dc823aaf146105d1578063e2877b4e14610601578063f7a03a1e1461061f576101f0565b8063c70597ad1461052f578063cce9d43e1461054b578063ccfaed161461057b578063d0d9a5e314610597576101f0565b8063a03de49e116100de578063a03de49e146104bd578063a53f514d146104d9578063afb97e3d146104f7578063b1e758a414610513576101f0565b80638f7f43a9146104235780638f9c79ed14610441578063996440c61461047157806399eedd2a146104a1576101f0565b80634df0a2d4116101875780636e9960c3116101565780636e9960c3146103c3578063745ada64146103e15780638129fc1c146103fd57806388c432e114610407576101f0565b80634df0a2d414610317578063572b6c05146103475780635b0a7aad146103775780636d4bce2014610393576101f0565b806324d7806c116101c357806324d7806c1461026b578063290c61b01461029b57806332991838146102cb5780633d8198b4146102e7576101f0565b80630de99991146101f5578063116461e9146102115780631da3e2dc1461022f57806321639f041461024d575b600080fd5b61020f600480360381019061020a9190613494565b61063b565b005b6102196106c5565b6040516102269190613551565b60405180910390f35b61023761075a565b6040516102449190613631565b60405180910390f35b61025561076e565b6040516102629190613662565b60405180910390f35b61028560048036038101906102809190613494565b610828565b6040516102929190613698565b60405180910390f35b6102b560048036038101906102b09190613494565b610895565b6040516102c29190613698565b60405180910390f35b6102e560048036038101906102e091906137e8565b6108b5565b005b61030160048036038101906102fc9190613494565b61098a565b60405161030e9190613551565b60405180910390f35b610331600480360381019061032c9190613494565b610cca565b60405161033e9190613551565b60405180910390f35b610361600480360381019061035c9190613494565b610f53565b60405161036e9190613698565b60405180910390f35b610391600480360381019061038c9190613831565b610fab565b005b6103ad60048036038101906103a89190613494565b6111ce565b6040516103ba9190613698565b60405180910390f35b6103cb6111ee565b6040516103d89190613662565b60405180910390f35b6103fb60048036038101906103f69190613494565b61121b565b005b6104056112da565b005b610421600480360381019061041c91906137e8565b611392565b005b61042b6113fb565b6040516104389190613631565b60405180910390f35b61045b60048036038101906104569190613494565b611519565b6040516104689190613698565b60405180910390f35b61048b60048036038101906104869190613494565b611539565b6040516104989190613698565b60405180910390f35b6104bb60048036038101906104b691906137e8565b6115ed565b005b6104d760048036038101906104d29190613831565b61178c565b005b6104e1611947565b6040516104ee9190613631565b60405180910390f35b610511600480360381019061050c91906137e8565b61195b565b005b61052d60048036038101906105289190613494565b6119b7565b005b610549600480360381019061054491906138a9565b611bd4565b005b61056560048036038101906105609190613494565b611d44565b6040516105729190613551565b60405180910390f35b610595600480360381019061059091906137e8565b611da3565b005b61059f611eea565b6040516105ac9190613631565b60405180910390f35b6105cf60048036038101906105ca9190613905565b6120fa565b005b6105eb60048036038101906105e69190613494565b612274565b6040516105f89190613551565b60405180910390f35b610609612348565b6040516106169190613631565b60405180910390f35b61063960048036038101906106349190613494565b6123dc565b005b61064b6106466124c3565b610828565b610681576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61068a81611539565b6106c2576106a581606a6000016124f590919063ffffffff16565b156106c2576106c181606560020161258890919063ffffffff16565b5b50565b6060606560010180546106d7906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610703906139bf565b80156107505780601f1061072557610100808354040283529160200191610750565b820191906000526020600020905b81548152906001019060200180831161073357829003601f168201915b5050505050905090565b6060610769606a60000161280b565b905090565b600061078061077b6124c3565b611519565b6107b6576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060040160006107c56124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008173ffffffffffffffffffffffffffffffffffffffff16606560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361088b5760019050610890565b600090505b919050565b60006108ae82606a6000016124f590919063ffffffff16565b9050919050565b6108c56108c06124c3565b611519565b15610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90613a62565b60405180910390fd5b6000815103610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090613af4565b60405180910390fd5b6109696109546124c3565b82606a6000016128a09092919063ffffffff16565b6109876109746124c3565b606560020161290790919063ffffffff16565b50565b606061099582611519565b6109cb576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166109ea6124c3565b73ffffffffffffffffffffffffffffffffffffffff161480610aa35750610a0f6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610bb057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610bad610ad56124c3565b607060040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610b9a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b50575b5050505050612a6b90919063ffffffff16565b14155b15610c8a57607060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054610c05906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610c31906139bf565b8015610c7e5780601f10610c5357610100808354040283529160200191610c7e565b820191906000526020600020905b815481529060010190602001808311610c6157829003601f168201915b50505050509050610cc5565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbc90613b60565b60405180910390fd5b919050565b6060610cd582611519565b610d0b576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16610d2a6124c3565b73ffffffffffffffffffffffffffffffffffffffff161480610de35750610d4f6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610ef057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610eed610e156124c3565b607060040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610eda57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e90575b5050505050612a6b90919063ffffffff16565b14155b15610f1357610f0c826070600001612b1090919063ffffffff16565b9050610f4e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4590613b60565b60405180910390fd5b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610fbb610fb66124c3565b611519565b610ff1576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607060040160006110026124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061106a6124c3565b607060040160006110796124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061114f6110ff6124c3565b606a60050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061258890919063ffffffff16565b61116f61115a6124c3565b846070600001612b309092919063ffffffff16565b816070600401600061117f6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816111c89190613d36565b50505050565b60006111e7826065600201612b4d90919063ffffffff16565b9050919050565b6000606560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61122b6112266124c3565b610828565b611261576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126a816111ce565b6112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a090613e54565b60405180910390fd5b6112c081606a600001612ba690919063ffffffff16565b6112d781606560020161258890919063ffffffff16565b50565b607560009054906101000a900460ff161561132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613ec0565b60405180910390fd5b6113326124c3565b606560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001607560006101000a81548160ff021916908315150217905550565b6113a261139d6124c3565b611519565b6113d8576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f86113e36124c3565b826070600001612b309092919063ffffffff16565b50565b606061140d6114086124c3565b611519565b611443576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b607060040160006114526124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561150f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116114c5575b5050505050905090565b60006115328260706000016124f590919063ffffffff16565b9050919050565b600061155282606a6000016124f590919063ffffffff16565b61155f57600090506115e8565b611576826065600201612b4d90919063ffffffff16565b1561158457600090506115e8565b6000606a60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546115d3906139bf565b9050036115e357600090506115e8565b600190505b919050565b61160b6115f86124c3565b606a6000016124f590919063ffffffff16565b611641576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61165f61164c6124c3565b6065600201612b4d90919063ffffffff16565b15611696576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a60040160006116a76124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546116ec906139bf565b905003611725576040517fa30132d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000815103611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176090613f52565b60405180910390fd5b6117896117746124c3565b82606a600001612b309092919063ffffffff16565b50565b61179c6117976124c3565b610895565b806117b357506117b26117ad6124c3565b611539565b5b156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90613fe4565b60405180910390fd5b6000825103611837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182e90613af4565b60405180910390fd5b6118576118426124c3565b8360706000016128a09092919063ffffffff16565b61185f6124c3565b6070600401600061186e6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080607060040160006118f96124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190816119429190613d36565b505050565b6060611956607060000161280b565b905090565b61196b6119666124c3565b610828565b6119a1576040517f4d371dc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606560010190816119b39190613d36565b5050565b6119c76119c26124c3565b611519565b6119fd576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a0681611539565b611a3c576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b1f8160706004016000611a4f6124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015611b0c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ac2575b5050505050612c0990919063ffffffff16565b611bd15760706004016000611b326124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b611bdd82611519565b611c13576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c1b6124c3565b73ffffffffffffffffffffffffffffffffffffffff16607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ced576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce490613b60565b60405180910390fd5b80607060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019081611d3f9190613d36565b505050565b6060611d4f82610895565b611d85576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d9c82606a600001612b1090919063ffffffff16565b9050919050565b6000815103611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde90614076565b60405180910390fd5b611e05611df26124c3565b606a6000016124f590919063ffffffff16565b611e3b576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e59611e466124c3565b6065600201612b4d90919063ffffffff16565b15611e90576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80606a6004016000611ea06124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081611ee69190613d36565b5050565b6060611f0a611ef76124c3565b606a6000016124f590919063ffffffff16565b611f40576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611f5e611f4b6124c3565b6065600201612b4d90919063ffffffff16565b15611f95576040517ff873d3b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606a6004016000611fa66124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054611feb906139bf565b905003612024576040517fa30132d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606a60050160006120336124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156120f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116120a6575b5050505050905090565b61210a6121056124c3565b611519565b612140576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61214983611539565b61217f576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121898282610fab565b82607060040160006121996124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061226f61221f6124c3565b606a60050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061290790919063ffffffff16565b505050565b6060606a60040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546122c3906139bf565b80601f01602080910402602001604051908101604052809291908181526020018280546122ef906139bf565b801561233c5780601f106123115761010080835404028352916020019161233c565b820191906000526020600020905b81548152906001019060200180831161231f57829003601f168201915b50505050509050919050565b606060656002016000018054806020026020016040519081016040528092919081815260200182805480156123d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612388575b5050505050905090565b6123ec6123e76124c3565b611519565b612422576040517fc11330e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61242b81611539565b612461576040517ffe2fc9c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124bf81607060040160006124746124c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101612c4090919063ffffffff16565b5050565b60006124ce33610f53565b156124e257601436033560601c90506124f1565b6124ea612e65565b90506124f2565b5b90565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255c90614108565b60405180910390fd5b600061257d8385600001612e6d90919063ffffffff16565b511415905092915050565b8160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612807578160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600184600001805490506126899190614157565b905060008460000182815481106126a3576126a261418b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828560020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055808560000184815481106127725761277161418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846000018054806127ce576127cd6141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050505b5050565b60608160000160000180548060200260200160405190810160405280929190818152602001828054801561289457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161284a575b50505050509050919050565b6128aa83836124f5565b156128ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e190614235565b60405180910390fd5b612902828285600001612f419092919063ffffffff16565b505050565b8160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612a675760018260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555081600001805490508260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b600080600090505b8351811015612ae5578273ffffffffffffffffffffffffffffffffffffffff16848281518110612aa657612aa561418b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612ad25780915050612b0a565b8080612add90614255565b915050612a73565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b6060612b288284600001612e6d90919063ffffffff16565b905092915050565b612b48828285600001612f419092919063ffffffff16565b505050565b60008260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612bb082826124f5565b612bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be69061430f565b60405180910390fd5b612c0581836000016130f590919063ffffffff16565b5050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612c368484612a6b565b1415905092915050565b600080612cd284805480602002602001604051908101604052809291908181526020018280548015612cc757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612c7d575b505050505084612a6b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103612d05576000915050612e5f565b600084805480602002602001604051908101604052809291908181526020018280548015612d8857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d3e575b505050505090508060018251612d9e9190614157565b81518110612daf57612dae61418b565b5b6020026020010151858381548110612dca57612dc961418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084805480612e2357612e226141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556001925050505b92915050565b600033905090565b60608260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054612ebb906139bf565b80601f0160208091040260200160405190810160405280929190818152602001828054612ee7906139bf565b8015612f345780601f10612f0957610100808354040283529160200191612f34565b820191906000526020600020905b815481529060010190602001808311612f1757829003601f168201915b5050505050905092915050565b8260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166130a15782600001805490508360020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018360030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090816130ef9190613d36565b50505050565b8160030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156133c1578160010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061319691906133c5565b8160030160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600184600001805490506132439190614157565b9050600084600001828154811061325d5761325c61418b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828560020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558085600001848154811061332c5761332b61418b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600001805480613388576133876141ba565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555050505b5050565b5080546133d1906139bf565b6000825580601f106133e35750613402565b601f0160209004906000526020600020908101906134019190613405565b5b50565b5b8082111561341e576000816000905550600101613406565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061346182613436565b9050919050565b61347181613456565b811461347c57600080fd5b50565b60008135905061348e81613468565b92915050565b6000602082840312156134aa576134a961342c565b5b60006134b88482850161347f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134fb5780820151818401526020810190506134e0565b60008484015250505050565b6000601f19601f8301169050919050565b6000613523826134c1565b61352d81856134cc565b935061353d8185602086016134dd565b61354681613507565b840191505092915050565b6000602082019050818103600083015261356b8184613518565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135a881613456565b82525050565b60006135ba838361359f565b60208301905092915050565b6000602082019050919050565b60006135de82613573565b6135e8818561357e565b93506135f38361358f565b8060005b8381101561362457815161360b88826135ae565b9750613616836135c6565b9250506001810190506135f7565b5085935050505092915050565b6000602082019050818103600083015261364b81846135d3565b905092915050565b61365c81613456565b82525050565b60006020820190506136776000830184613653565b92915050565b60008115159050919050565b6136928161367d565b82525050565b60006020820190506136ad6000830184613689565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136f582613507565b810181811067ffffffffffffffff82111715613714576137136136bd565b5b80604052505050565b6000613727613422565b905061373382826136ec565b919050565b600067ffffffffffffffff821115613753576137526136bd565b5b61375c82613507565b9050602081019050919050565b82818337600083830152505050565b600061378b61378684613738565b61371d565b9050828152602081018484840111156137a7576137a66136b8565b5b6137b2848285613769565b509392505050565b600082601f8301126137cf576137ce6136b3565b5b81356137df848260208601613778565b91505092915050565b6000602082840312156137fe576137fd61342c565b5b600082013567ffffffffffffffff81111561381c5761381b613431565b5b613828848285016137ba565b91505092915050565b600080604083850312156138485761384761342c565b5b600083013567ffffffffffffffff81111561386657613865613431565b5b613872858286016137ba565b925050602083013567ffffffffffffffff81111561389357613892613431565b5b61389f858286016137ba565b9150509250929050565b600080604083850312156138c0576138bf61342c565b5b60006138ce8582860161347f565b925050602083013567ffffffffffffffff8111156138ef576138ee613431565b5b6138fb858286016137ba565b9150509250929050565b60008060006060848603121561391e5761391d61342c565b5b600061392c8682870161347f565b935050602084013567ffffffffffffffff81111561394d5761394c613431565b5b613959868287016137ba565b925050604084013567ffffffffffffffff81111561397a57613979613431565b5b613986868287016137ba565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139d757607f821691505b6020821081036139ea576139e9613990565b5b50919050565b7f436f6e74726163743a204164647265737320616c72656164792072656769737460008201527f657265642061732070617469656e740000000000000000000000000000000000602082015250565b6000613a4c602f836134cc565b9150613a57826139f0565b604082019050919050565b60006020820190508181036000830152613a7b81613a3f565b9050919050565b7f436f6e74726163743a20456d7074792068617368206973206e6f7420616c6c6f60008201527f7765640000000000000000000000000000000000000000000000000000000000602082015250565b6000613ade6023836134cc565b9150613ae982613a82565b604082019050919050565b60006020820190508181036000830152613b0d81613ad1565b9050919050565b7f4e6f7420416c6c6f776564000000000000000000000000000000000000000000600082015250565b6000613b4a600b836134cc565b9150613b5582613b14565b602082019050919050565b60006020820190508181036000830152613b7981613b3d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613be27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613ba5565b613bec8683613ba5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000613c33613c2e613c2984613c04565b613c0e565b613c04565b9050919050565b6000819050919050565b613c4d83613c18565b613c61613c5982613c3a565b848454613bb2565b825550505050565b600090565b613c76613c69565b613c81818484613c44565b505050565b5b81811015613ca557613c9a600082613c6e565b600181019050613c87565b5050565b601f821115613cea57613cbb81613b80565b613cc484613b95565b81016020851015613cd3578190505b613ce7613cdf85613b95565b830182613c86565b50505b505050565b600082821c905092915050565b6000613d0d60001984600802613cef565b1980831691505092915050565b6000613d268383613cfc565b9150826002028217905092915050565b613d3f826134c1565b67ffffffffffffffff811115613d5857613d576136bd565b5b613d6282546139bf565b613d6d828285613ca9565b600060209050601f831160018114613da05760008415613d8e578287015190505b613d988582613d1a565b865550613e00565b601f198416613dae86613b80565b60005b82811015613dd657848901518255600182019150602085019450602081019050613db1565b86831015613df35784890151613def601f891682613cfc565b8355505b6001600288020188555050505b505050505050565b7f436f6e74726163743a20446f63746f72206e6f74207265676973746572656400600082015250565b6000613e3e601f836134cc565b9150613e4982613e08565b602082019050919050565b60006020820190508181036000830152613e6d81613e31565b9050919050565b7f436f6e747261637420616c726561647920696e697469616c697a656421000000600082015250565b6000613eaa601d836134cc565b9150613eb582613e74565b602082019050919050565b60006020820190508181036000830152613ed981613e9d565b9050919050565b7f436f6e74726163743a20456d7074792068617368206973206e6f7420616c6c6f60008201527f7765642100000000000000000000000000000000000000000000000000000000602082015250565b6000613f3c6024836134cc565b9150613f4782613ee0565b604082019050919050565b60006020820190508181036000830152613f6b81613f2f565b9050919050565b7f436f6e74726163743a204164647265737320616c72656164792072656769737460008201527f6572656420617320646f63746f72000000000000000000000000000000000000602082015250565b6000613fce602e836134cc565b9150613fd982613f72565b604082019050919050565b60006020820190508181036000830152613ffd81613fc1565b9050919050565b7f436f6e74726163743a20456d707479207075626c6963206b6579206973206e6f60008201527f7420616c6c6f7765642100000000000000000000000000000000000000000000602082015250565b6000614060602a836134cc565b915061406b82614004565b604082019050919050565b6000602082019050818103600083015261408f81614053565b9050919050565b7f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006140f26022836134cc565b91506140fd82614096565b604082019050919050565b60006020820190508181036000830152614121816140e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061416282613c04565b915061416d83613c04565b925082820390508181111561418557614184614128565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500600082015250565b600061421f601f836134cc565b915061422a826141e9565b602082019050919050565b6000602082019050818103600083015261424e81614212565b9050919050565b600061426082613c04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361429257614291614128565b5b600182019050919050565b7f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006142f96021836134cc565b91506143048261429d565b604082019050919050565b60006020820190508181036000830152614328816142ec565b905091905056fea2646970667358221220dd8f0b37258b20166796d6d889fc491bbc6dcc696858ffa5fe47968b25f9a55164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 93,
        "contract": "contracts/Contract.sol:Contract",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 96,
        "contract": "contracts/Contract.sol:Contract",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 580,
        "contract": "contracts/Contract.sol:Contract",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 85,
        "contract": "contracts/Contract.sol:Contract",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2887,
        "contract": "contracts/Contract.sol:Contract",
        "label": "admin",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Admin)2862_storage"
      },
      {
        "astId": 2890,
        "contract": "contracts/Contract.sol:Contract",
        "label": "doctors",
        "offset": 0,
        "slot": "106",
        "type": "t_struct(Doctors)2884_storage"
      },
      {
        "astId": 2893,
        "contract": "contracts/Contract.sol:Contract",
        "label": "patients",
        "offset": 0,
        "slot": "112",
        "type": "t_struct(Patients)2871_storage"
      },
      {
        "astId": 2895,
        "contract": "contracts/Contract.sol:Contract",
        "label": "initialized",
        "offset": 0,
        "slot": "117",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(Map)2321_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AddToBoolMapping.Map)",
        "numberOfBytes": "32",
        "value": "t_struct(Map)2321_storage"
      },
      "t_mapping(t_address,t_struct(MedicalRecord)2854_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Contract.MedicalRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(MedicalRecord)2854_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Admin)2862_storage": {
        "encoding": "inplace",
        "label": "struct Contract.Admin",
        "members": [
          {
            "astId": 2856,
            "contract": "contracts/Contract.sol:Contract",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2858,
            "contract": "contracts/Contract.sol:Contract",
            "label": "public_key",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2861,
            "contract": "contracts/Contract.sol:Contract",
            "label": "pending_doctors",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Map)2321_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Doctors)2884_storage": {
        "encoding": "inplace",
        "label": "struct Contract.Doctors",
        "members": [
          {
            "astId": 2874,
            "contract": "contracts/Contract.sol:Contract",
            "label": "users",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Role)3842_storage"
          },
          {
            "astId": 2878,
            "contract": "contracts/Contract.sol:Contract",
            "label": "public_keys",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 2883,
            "contract": "contracts/Contract.sol:Contract",
            "label": "docToPatAccess",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Map)2321_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Map)2321_storage": {
        "encoding": "inplace",
        "label": "struct AddToBoolMapping.Map",
        "members": [
          {
            "astId": 2312,
            "contract": "contracts/Contract.sol:Contract",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2316,
            "contract": "contracts/Contract.sol:Contract",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2320,
            "contract": "contracts/Contract.sol:Contract",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)2512_storage": {
        "encoding": "inplace",
        "label": "struct AddToStrMapping.Map",
        "members": [
          {
            "astId": 2499,
            "contract": "contracts/Contract.sol:Contract",
            "label": "keys",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2503,
            "contract": "contracts/Contract.sol:Contract",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_string_storage)"
          },
          {
            "astId": 2507,
            "contract": "contracts/Contract.sol:Contract",
            "label": "indexOf",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2511,
            "contract": "contracts/Contract.sol:Contract",
            "label": "inserted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MedicalRecord)2854_storage": {
        "encoding": "inplace",
        "label": "struct Contract.MedicalRecord",
        "members": [
          {
            "astId": 2848,
            "contract": "contracts/Contract.sol:Contract",
            "label": "editor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2851,
            "contract": "contracts/Contract.sol:Contract",
            "label": "viewers",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2853,
            "contract": "contracts/Contract.sol:Contract",
            "label": "key_data_hash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Patients)2871_storage": {
        "encoding": "inplace",
        "label": "struct Contract.Patients",
        "members": [
          {
            "astId": 2865,
            "contract": "contracts/Contract.sol:Contract",
            "label": "users",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Role)3842_storage"
          },
          {
            "astId": 2870,
            "contract": "contracts/Contract.sol:Contract",
            "label": "records",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(MedicalRecord)2854_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Role)3842_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 3841,
            "contract": "contracts/Contract.sol:Contract",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)2512_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}